// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SL.Survey.DataAccess.Data;

namespace SL.Survey.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210215034619_Template_ChangingKeyNames")]
    partial class Template_ChangingKeyNames
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SL.Survey.Entities.Model.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SurveyQuestionOfferedAnswerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedBy")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("AnswerId");

                    b.HasIndex("SurveyQuestionOfferedAnswerId");

                    b.ToTable("Answer", "lsurvey");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.OfferedAnswer", b =>
                {
                    b.Property<int>("OfferedAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedBy")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("OfferedAnswerId");

                    b.ToTable("OfferedAnswer", "lsurvey");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedBy")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("QuestionId");

                    b.ToTable("Question", "lsurvey");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.QuestionType", b =>
                {
                    b.Property<int>("QuestionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedBy")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("QuestionTypeId");

                    b.ToTable("QuestionType", "lsurvey");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.Survey", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OtherInfo")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("SurveyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedBy")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("SurveyId");

                    b.HasIndex("SurveyTypeId");

                    b.ToTable("Survey", "lsurvey");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.SurveyQuestion", b =>
                {
                    b.Property<int>("SurveyQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedBy")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("SurveyQuestionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyQuestion", "lsurvey");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.SurveyQuestionOfferedAnswer", b =>
                {
                    b.Property<int>("SurveyQuestionOfferedAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OfferedAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyQuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedBy")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("SurveyQuestionOfferedAnswerId");

                    b.HasIndex("OfferedAnswerId");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("SurveyQuestionOfferedAnswer", "lsurvey");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.SurveyType", b =>
                {
                    b.Property<int>("SurveyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedBy")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("SurveyTypeId");

                    b.ToTable("SurveyType", "lsurvey");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.Answer", b =>
                {
                    b.HasOne("SL.Survey.Entities.Model.SurveyQuestionOfferedAnswer", "SurveyQuestionOfferedAnswerIdNavigation")
                        .WithMany("Answers")
                        .HasForeignKey("SurveyQuestionOfferedAnswerId")
                        .HasConstraintName("FK_Answer_SurveyQuestionOfferedAnswer")
                        .IsRequired();

                    b.Navigation("SurveyQuestionOfferedAnswerIdNavigation");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.Survey", b =>
                {
                    b.HasOne("SL.Survey.Entities.Model.SurveyType", "SurveyTypeIdNavigation")
                        .WithMany("Surveys")
                        .HasForeignKey("SurveyTypeId")
                        .HasConstraintName("FK_Survey_SurveyType")
                        .IsRequired();

                    b.Navigation("SurveyTypeIdNavigation");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.SurveyQuestion", b =>
                {
                    b.HasOne("SL.Survey.Entities.Model.Question", "QuestionNavigationId")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_SurveyQuestion_Question")
                        .IsRequired();

                    b.HasOne("SL.Survey.Entities.Model.QuestionType", "QuestionTypeIdNavigation")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("QuestionTypeId")
                        .HasConstraintName("FK_SurveyQuestion_QuestionType")
                        .IsRequired();

                    b.HasOne("SL.Survey.Entities.Model.Survey", "SurveyIdNavigation")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("FK_SurveyQuestion_Survey")
                        .IsRequired();

                    b.Navigation("QuestionNavigationId");

                    b.Navigation("QuestionTypeIdNavigation");

                    b.Navigation("SurveyIdNavigation");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.SurveyQuestionOfferedAnswer", b =>
                {
                    b.HasOne("SL.Survey.Entities.Model.OfferedAnswer", "OfferedAnswerIdNavigation")
                        .WithMany("SurveyQuestionOfferedAnswers")
                        .HasForeignKey("OfferedAnswerId")
                        .HasConstraintName("FK_SurveyQuestionOfferedAnswer_OfferedAnswer1")
                        .IsRequired();

                    b.HasOne("SL.Survey.Entities.Model.SurveyQuestion", "SurveyQuestionIdNavigation")
                        .WithMany("SurveyQuestionOfferedAnswers")
                        .HasForeignKey("SurveyQuestionId")
                        .HasConstraintName("FK_SurveyQuestionOfferedAnswer_SurveyQuestion1")
                        .IsRequired();

                    b.Navigation("OfferedAnswerIdNavigation");

                    b.Navigation("SurveyQuestionIdNavigation");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.OfferedAnswer", b =>
                {
                    b.Navigation("SurveyQuestionOfferedAnswers");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.Question", b =>
                {
                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.QuestionType", b =>
                {
                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.Survey", b =>
                {
                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.SurveyQuestion", b =>
                {
                    b.Navigation("SurveyQuestionOfferedAnswers");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.SurveyQuestionOfferedAnswer", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("SL.Survey.Entities.Model.SurveyType", b =>
                {
                    b.Navigation("Surveys");
                });
#pragma warning restore 612, 618
        }
    }
}
